Magesh Kuppan

Feedback:
    https://w3.ibm.com/w3publisher/cioindia/trainingfeedbacksurvey
    
Schedule:
    Start       : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodoly:
    No powerpoints
    Atleast 50% of the participants should have completed the assignments

Prerequisites:
    JavaScript

Software requirements:
    1. Visual Studio Code
    2. Node.js
    3. Chrome Browser
    4. Docker

About You:
    Name
    Total Experience
    Primary Skillset
    Experience in Node.js (if any)
    Any interesting books you read / any interesting shows you watched recently


Why Node.js?

C
C++
    - Python
1995 - Java
1999 - .NET
    - Ruby
2008 - Node.js

JavaScript
    Data Types
        Number, boolean, string, null, undefined, object
    Programming Constructs
        var, if else, for, while, do while, switch, break, continue, function, return, try catch, throw, debugger
    APIs
        Math, Array, Regex, Date, Error, timer (setTimeout, clearTimeout, setInterval, clearInterval)

Resources needed at runtime

Single Threaded Event Loop

Receptionist
    1. Visitor
        a. visitor ledger
        b. gadget ledger
        c. to be escorted
    2. Courier
        a. courier ledger
    3. An Associate
        a. Temp badger ledger


Strategy:
    1. Single Threaded
        Blocking

    2. Multi Threaded
        Blocking

    3. Single Threaded
        Non-Blocking
        Event Loop


Assignment:1
    Create a calculator object with the following methods
        add(x,y)
        subtract(x,y)
        multiply(x,y)
        divide(x,y)

    invoke the above methods for x = 100 and y = 200 and print the results

Module System
    1. CommonJS
        Exporting :
            module.exports = ....
        Importing :
            using the 'require' function
    2. ES6 Modules

    Anything defined in a JS file is considered "private" by default

Assignment:2
    Create an accummulator.js that exports an object with the following methods
        add(x)
        subtract(x)
        multiply(x)
        divide(x)
        getResult()

    create an accumulator-client.js that imports the accumulator.js and invokes the above methods
        acc.add(10)
        acc.subtract(5)
        acc.multiply(10)
        acc.divide(2)
        acc.getResult() // should return 25

JavaScript
    0. Objects and functions are reference types
    1. Object is a map / dictionary / hash table
        collection of key-value pairs
    2. Objects are dynamic
    3. Convention:
        Use the '.' notation for updating existing attributes & use the [] notation for creating new attributes
    4. functions are first class citizens
        functions can be treated like objects
            a. assign functions to variables
            b. pass functions as arguments
            c. return functions from functions
    5. methods = attributes of an object whose value is a function
    6. this (invocation context)
        It doesnt matter who owns the function (OR) where the function is
        What matters is "how the function is invoked"!!
    7. Function invocation patterns
        a. As a method of an obj
            this -> obj
        b. As a function
            this -> global
        c. Using the 'call' method of the function
        d. Using the 'apply' method of the function
        e. Using the 'new' keyword
        f. As an 'Immediately Invoked Function Expression' (IIFE)

Assignment:3
    Create an object with 'increment' and 'decrement' methods
    The methods should behave as below
    var spinner = /*.......*/
    spinner.increment() // should return 1
    spinner.increment() // should return 2
    spinner.increment() // should return 3

    spinner.decrement() // should return 2
    spinner.decrement() // should return 1
    spinner.decrement() // should return 0
    spinner.decrement() // should return -1

    IMPORTANT:
        there should be NO WAY by which one can influence the outcome of the increment & decrement methods

    The following SHOULD NOT be possible
        counter = 10000
        spinner.increment() // => SHOULD NOT return 10001

        OR
        spinner.counter = 10000
        spinner.increment() // => SHOULD NOT return 10001

    Assignment-3 Solution:
    function spinnerFactory(){
        var counter = 0;
        function increment(){
            return counter++
        }
        function decrement(){
            return counter--
        }
        var spinner = {
            increment: increment,
            decrement: decrement
        }
        return spinner
    }

Assignment:4
    Read the 'calculator.csv'
    Perform the respective operation for each line
    Write the result in another file 'result.txt'

    Solve the problem using sync, async and streams

Assignment:5
    Modify the server.js to behave as follows:
        if req is made for '/'
            serve index.html
        if req is made for 'index.html'
            serve index.html
        else
            serve 404

Assignment:6
    Modify the server.js to behave as follows:
        if req is made for '/'
            serve index.html
        check the resource requested (any resource)
            if it exists in the filesystem
                serve the resource
            else
                serve 404

Assignment:7
    Combine the functionalities of 'web-server' & 'app-server' into one server
    1. Check if the incoming request for any 'static' resource 
        static resource = resource with extension '.html'/'.css'/'.js'/'.xml'/'.jpg'/'.jpeg'/'.png'/'.gif'/'.svg'/'.ico'/'.json'
        if the resource exists
            serve the resource
        else
            serve 404
    2. check if the request is for '/calculator'
        parse the querystring
        process the data
        serve the result
    3. else
        serve 404

Assignment:8
    Refactoring
        1. data parsing
        2. serving static resources
        3. serving calculator
        4. serving 404

Assignment:9
    Make the public folder path as an input to the serve-static middleware
    Once the middleware is initialized, the public folder path should not allowed to be modified

Assignment:10
    Everytime a request is received, log the 'method' and 'url' of the request in the console

Assignment:11
    refactor the data extraction logic in 'serve-calculator' POST request handling to data-parser.js

package.json
    contains the meta data of the application
        name
        version
        author
        repository
        license
        scripts
            commands that you want to configure
        dependencies
            dependencies for running the application
        devDependencies
            dependencies for development activities

npm
    package manager to node.js

to create a package.json file
    npm init

to create a package.json file with defaults
    npm init -y

Example
npm install color@4.1.2
import and use in logger.js
    var chalk = require('chalk')
    console.lo
    

To setup the application
    npm install

To install development dependencies
    npm install --save-dev <module name>

To run custom configured script commands
    npm run-script <script command name>

To install express-generator
    npm install -g express-generator

To generate the application
    In an empty folder run the following command
        express -v hbs .


Assignment-12
    implement task api with in memory data

Assignment-13
    implement the task repository (file storage)
    use JSON.strigify & JSON.parse to serialize and deserialize the data
    IMPORTANT: file read & write operations should be async
    
ES6 features
    1. let
    2. const
    3. array destructuring
    4. rest operator (arrays)
    5. spread operator (arrays)
    6. object destructuring
    7. rest operator (object)
    8. spread operator (object)
    9. default parameters
    10. arrow functions
    11. object construction enhancements
    12. iterators
    13. classes
    14. template literals
    15. promise (TBD)
    16. async await (TBD)

    for other features - http://es6-features.org


Data Access
    MySQL
        https://www.npmjs.com/package/mysql
        https://www.w3schools.com/nodejs/nodejs_mysql.asp

    Cors


    Security
        https://www.npmjs.com/package/helmet

    Logging
        Http tracing 
            https://www.npmjs.com/package/morgan
        App Logging
            https://www.npmjs.com/package/winston
            
        Reference:
            https://blog.logrocket.com/node-js-logging-best-practices/

Server Sent Events
    Server Prep
        Headers to the client
            'content-type' : 'text/event-stream'
            'connection' : 'keep-alive'
            'Access-Control-Allow-Origin' : '*'

        Send the events
            'event:<name of the event>\n'
            'data:<data to be sent>\n\n'

    Client
        Use the EventSource API
            https://www.w3schools.com/html/html5_eventsource.asp


Graphql Query examples
=======================

query noOfUsers{
  totalUsers
}

query allUsers{
  users {
    id
    firstName
    lastName
    email
    fullName
  }
}

query allUsersWithCountAndProjects{
  totalUsers
  users {
    id
    firstName
    lastName
    email
    fullName
  }
  projects{
    id
    name
    description
  }
}

query allUserEmails {
  users{
    id
    email
    fullName
  }
}

#listing all the projects with their bugs and users
query allProjects{
  #all the projects
  projects{
    id
    name
    description
    isActive
    #all the bugs
    bugs {
      id
      title
      description
      severity
      status
      createdBy{
        id
        firstName
        lastName
        email
      }
    }
  }
}

#using arguments
query user1{
  user(id : "user-1"){
    id
    firstName
    lastName
    email
    fullName
  }
}

query usersByIds {
  usersById(ids : ["user-1"]){
    id
    firstName
    lastName
    email
  }
}

#using alias
query usersByAlias {
  users {
    id
    fName : firstName
    lName: lastName
    email
  }
}

query getAppUserWithAlias{
  appUser : user(id : "user-1"){
    id
    fName : firstName
    lName : lastName
    email
  }
}


#using variables
query getUserById($userId : ID!) {
  user(id : $userId){
    id
    firstName
    lastName
    email
  }
}

#using enum
query projectByBugStatus{
  project(id : "project-2") {
    id
		name
    description
    isActive
    bugs(status : OPEN){
      id
      title
      description
      severity
      status
    }
  }
}

#using variables and enums
query projectByBugStatus2($projectId : ID!, $bugStatus : Status){
  project(id :$projectId) {
    id
		name
    description
    isActive
    bugs(status : $bugStatus){
      id
      title
      description
      severity
      status
    }
  }
}

#fragment
fragment bugDetails on Bug {
  id
  title
  description
  severity
  status
}

query projectsWithBugFragment{
  projects {
    id
    name
    description
    bugs {
      ...bugDetails
    }
  }
}

#example-2
#################
fragment openBugDetails on Project{
  bugs(status : OPEN) {
    id
    title
    description
    severity
    status
  }
}

query ProjectsWithOpenBugs{
  projects{
    id
    name
    description
    isActive
    ...openBugDetails
  }
}

#################
fragment openBugDetails2 on Project{
  bugs(status : OPEN) {
    ...bugDetails
  }
}

query ProjectsWithOpenBugs2{
  projects{
    id
    name
    description
    isActive
    ...openBugDetails2
  }
}


#variables with fragments
fragment bugDetailsByStatus on Project {
  bugs(status : $bugStatus){
      id
      title
      description
      severity
      status
    }
}


query projectByBugStatus3($projectId : ID! = "project-1", $bugStatus : Status = OPEN){
  project(id :$projectId) {
    id
		name
    description
    isActive
    ...bugDetailsByStatus
  }
}

#fragment on interface
fragment actionDetails on Action {
  id
  date
  bugId
}

query bugsWithActions{
  bugs{
    ...bugDetails
    actions {
      ...actionDetails
    }
  }
}

query allActionsForBug{
  actions(bugId : "bug-"){
    ...actionDetails
  }
}


#using directives (@include & @skip)
query projectsWithBugs($includeDetails : Boolean = false){
  projects{
    id
    name
    description
    isActive
    bugs(status : OPEN) @include(if : $includeDetails) {
      id
      title
      description
      severity
      status
    }
  }
}

#mutations
mutation createNewUser{
  createUser(firstName : "Magesh", lastName : "Kuppan", email : "mageshk@mail.com"){
    id
    firstName
    lastName
    email
    fullName
  }
}

#create a new project and retrive the newly created project with bugs
mutation createNewProject{
  createProject(project : {
    name : "Voyager",
    description : "Visual type exlorer for graphql",
    isActive : true
  }){
    id
    name
    description
    isActive
    bugs{
      ...bugDetails
    }
  }
}

mutation createNewProjectWithVariables($newProject : ProjectInput){
  createProject(project : $newProject){
    id
    name
    description
    isActive
    bugs{
      ...bugDetails
    }
  }
}

mutation createBug{
  createBug(bug : {
    title : "Server not listening",
    description : "server is not responding to requests",
    severity :CRITICAL,
    projectId : "project-5",
    userId : "user-1"
  }){
    ...bugDetails,
    actions{
      id
      date
      bugId
    }
  }
}

mutation CommentABug1{
  commentBug(commentInfo : {
    bugId : "bug-6",
    commentedBy : "user-1",
    comment: "this need to be fixed sooner"
  }){
    ...bugDetails
  }
}

mutation CommentABug2{
  commentBug(commentInfo : {
    bugId : "bug-6",
    commentedBy : "user-2",
    comment: "This is being looked at"
  }){
    ...bugDetails
  }
}

mutation fixABug{
  fixBug(fixInfo : {
    bugId : "bug-6",
    fixedBy : "user-1",
    solution : "undo the commits"
  }){
    ...bugDetails
  }
}

mutation closeABug{
	closeBug(closeBugInfo : {
    bugId : "bug-6",
    closedBy : "user-2",
		reason : "All tests are green"
  }){
    ...bugDetails
  }
}

#get the bug with all the actions
query getBug6{
  bug(id : "bug-6"){
    ...bugDetails,
    actions {
      id
      date
      bugId
    }
  }
}

fragment userDetails on User {
  id
  firstName
  lastName
  email
}

#using interfaces & inline fragments
query getBug6WithAllActions{
  bug(id : "bug-6"){
    ...bugDetails,
    actions {
      __typename
      id
      date
      bugId
      ... on OpenAction {
        openedBy{
          ...userDetails
        }
        description
      }
      ... on CommentAction {
        commentedBy{
          ...userDetails
        }
        comment
      }
      ... on FixAction {
        fixedBy{
          ...userDetails
        }
        solution
      }
      ... on CloseAction {
        closedBy{
          ...userDetails
        }
        reason
      }
    }
  }
}


#interospection query
query interospection{
  __schema{
    queryType{
      name
      kind
      description
      fields{
        name
        description
        args{
          name
          description
          type{
            name
            kind
          }
        }
        type{
          name
          description
          kind
          
        }
      }
    }
  }
}


query implementationsOfActionInterface{
  __type(name : "Action"){
    name
    kind
    possibleTypes{
      name
      kind
    }
  }
}


query enumValues{
  __type(name : "Status"){
    enumValues{
      name
      description
      __typename
    }
  }
}

#assignment
fragment bugDetailsWithActions on Bug{
	...bugDetails
  actions {
      __typename
      id
      date
      bugId
      ... on OpenAction {
        openedBy{
          ...userDetails
        }
        description
      }
      ... on CommentAction {
        commentedBy{
          ...userDetails
        }
        comment
      }
      ... on FixAction {
        fixedBy{
          ...userDetails
        }
        solution
      }
      ... on CloseAction {
        closedBy{
          ...userDetails
        }
        reason
      }
    }
}
query dataForProjectScreen{
  project(id : "project-5") {
    id
		name
    description
    isActive
    openBugs : bugs(status : OPEN){
      ...bugDetailsWithActions
    }
    inProgressBugs : bugs(status : IN_PROGRESS){
      ...bugDetailsWithActions
    }
    closedBugs : bugs(status : CLOSED){
      ...bugDetailsWithActions
    }
  }
}


