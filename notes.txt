Magesh Kuppan

Schedule:
    Start       : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodoly:
    No powerpoints
    Atleast 50% of the participants should have completed the assignments

Prerequisites:
    JavaScript

Software requirements:
    1. Visual Studio Code
    2. Node.js
    3. Chrome Browser
    4. Docker

About You:
    Name
    Total Experience
    Primary Skillset
    Experience in Node.js (if any)
    Any interesting books you read / any interesting shows you watched recently


Why Node.js?

C
C++
    - Python
1995 - Java
1999 - .NET
    - Ruby
2008 - Node.js

JavaScript
    Data Types
        Number, boolean, string, null, undefined, object
    Programming Constructs
        var, if else, for, while, do while, switch, break, continue, function, return, try catch, throw, debugger
    APIs
        Math, Array, Regex, Date, Error, timer (setTimeout, clearTimeout, setInterval, clearInterval)

Resources needed at runtime

Single Threaded Event Loop

Receptionist
    1. Visitor
        a. visitor ledger
        b. gadget ledger
        c. to be escorted
    2. Courier
        a. courier ledger
    3. An Associate
        a. Temp badger ledger


Strategy:
    1. Single Threaded
        Blocking

    2. Multi Threaded
        Blocking

    3. Single Threaded
        Non-Blocking
        Event Loop


Assignment:1
    Create a calculator object with the following methods
        add(x,y)
        subtract(x,y)
        multiply(x,y)
        divide(x,y)

    invoke the above methods for x = 100 and y = 200 and print the results

Module System
    1. CommonJS
        Exporting :
            module.exports = ....
        Importing :
            using the 'require' function
    2. ES6 Modules

    Anything defined in a JS file is considered "private" by default

Assignment:2
    Create an accummulator.js that exports an object with the following methods
        add(x)
        subtract(x)
        multiply(x)
        divide(x)
        getResult()

    create an accumulator-client.js that imports the accumulator.js and invokes the above methods
        acc.add(10)
        acc.subtract(5)
        acc.multiply(10)
        acc.divide(2)
        acc.getResult() // should return 25

JavaScript
    0. Objects and functions are reference types
    1. Object is a map / dictionary / hash table
        collection of key-value pairs
    2. Objects are dynamic
    3. Convention:
        Use the '.' notation for updating existing attributes & use the [] notation for creating new attributes
    4. functions are first class citizens
        functions can be treated like objects
            a. assign functions to variables
            b. pass functions as arguments
            c. return functions from functions
    5. methods = attributes of an object whose value is a function
    6. this (invocation context)
        It doesnt matter who owns the function (OR) where the function is
        What matters is "how the function is invoked"!!
    7. Function invocation patterns
        a. As a method of an obj
            this -> obj
        b. As a function
            this -> global
        c. Using the 'call' method of the function
        d. Using the 'apply' method of the function
        e. Using the 'new' keyword
        f. As an 'Immediately Invoked Function Expression' (IIFE)

Assignment:3
    Create an object with 'increment' and 'decrement' methods
    The methods should behave as below
    var spinner = /*.......*/
    spinner.increment() // should return 1
    spinner.increment() // should return 2
    spinner.increment() // should return 3

    spinner.decrement() // should return 2
    spinner.decrement() // should return 1
    spinner.decrement() // should return 0
    spinner.decrement() // should return -1

    IMPORTANT:
        there should be NO WAY by which one can influence the outcome of the increment & decrement methods

    The following SHOULD NOT be possible
        counter = 10000
        spinner.increment() // => SHOULD NOT return 10001

        OR
        spinner.counter = 10000
        spinner.increment() // => SHOULD NOT return 10001

    Assignment-3 Solution:
    function spinnerFactory(){
        var counter = 0;
        function increment(){
            return counter++
        }
        function decrement(){
            return counter--
        }
        var spinner = {
            increment: increment,
            decrement: decrement
        }
        return spinner
    }

Assignment:4
    Read the 'calculator.csv'
    Perform the respective operation for each line
    Write the result in another file 'result.txt'

    Solve the problem using sync, async and streams

Assignment:5
    Modify the server.js to behave as follows:
        if req is made for '/'
            serve index.html
        if req is made for 'index.html'
            serve index.html
        else
            serve 404

Assignment:6
    Modify the server.js to behave as follows:
        if req is made for '/'
            serve index.html
        check the resource requested (any resource)
            if it exists in the filesystem
                serve the resource
            else
                serve 404

Assignment:7
    Combine the functionalities of 'web-server' & 'app-server' into one server
    1. Check if the incoming request for any 'static' resource 
        static resource = resource with extension '.html'/'.css'/'.js'/'.xml'/'.jpg'/'.jpeg'/'.png'/'.gif'/'.svg'/'.ico'/'.json'
        if the resource exists
            serve the resource
        else
            serve 404
    2. check if the request is for '/calculator'
        parse the querystring
        process the data
        serve the result
    3. else
        serve 404